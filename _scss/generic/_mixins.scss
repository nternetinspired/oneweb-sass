
// ==========================================================================
//  MIXINS
// ==========================================================================

// Set boxsizing, defaults to border-box.
@mixin box-sizing($boxsize: border-box) {
    -webkit-box-sizing: $boxsize;
    -moz-box-sizing: $boxsize;
    -ms-box-sizing: $boxsize;
    box-sizing: $boxsize;
}

// Better OSX font-rendering
@mixin font-smoothing() {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// Cross-browser opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack.
@mixin clearfix {
    &:before,
    &:after{
        content:"";
        display:table;
    }
    &:after{
        clear:both;
    }
}

// Font-face syntax, the easy way
@mixin font-face($family,$src,$weight: normal,$style: normal) {
	@font-face {
		font-family: $family;
		src: url('#{$src}.eot'); // IE9 compat
		src: url('#{$src}.eot?#iefix') format('embedded-opentype'), // IE8 and below
			url('#{$src}.woff') format('woff'), // standards
			url('#{$src}.ttf') format('truetype'), // Safari, Android, iOS
			url('#{$src}.svg##{$family}') format('svg'); // legacy iOS

		font-style: $style;
		font-weight: $weight;
	}
}

// Vertically and horizontally center something of unknown size inside and parent of unknown size.
@mixin centered {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}

// Useful for image replacement
@mixin text-hide() {
    font: #{0/0} a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

// Add proportional space around elements, increasing with viewport.
@mixin space {
    padding: spacer(6) spacer(4) spacer(2);

    @include mq(sm) {
        padding: spacer(8) spacer(4) spacer(4);
    }

    @include mq(md) {
        padding: spacer(12) spacer(4) spacer(8);
    }

    @include mq(lg) {
        padding: spacer(16) spacer(4) spacer(12);
    }
}

/*
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 6px, $color: $root-color){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

// Hyphenate text.
@mixin hyphens() {
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -o-hyphens: auto;
    hyphens: auto;
}

// Basic transitions.
@mixin transition($transition: all .3s ease) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

// Better box-shadows.
@mixin box-shadow($shadow1, $shadow2:false, $shadow3:false) {
    $shadows: $shadow1;
    @if $shadow2 { $shadows: $shadow1, $shadow2; }
    @if $shadow3 { $shadows: $shadow1, $shadow2, $shadow3; }
    -webkit-box-shadow: $shadows;
    -moz-box-shadow: $shadows;
    box-shadow: $shadows;
}

// Basic horizontal gradients.
@mixin horizontal($startColor: $brand-color, $endColor: lighten($brand-color, 10%)) {
    background-color: $endColor;
    background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(left, $startColor, $endColor);                   // Safari 5.1+, Chrome 10+
    background-image: -moz-linear-gradient(left, $startColor, $endColor);                      // FF 3.6+
    background-image: -ms-linear-gradient(left, $startColor, $endColor);                       // IE10
    background-image: -o-linear-gradient(left, $startColor, $endColor);                        // Opera 11.10
    background-image: linear-gradient(left, $startColor, $endColor);                           // W3C
    background-repeat: repeat-x;
}

// Basic vertical gradients.
@mixin vertical($startColor: $brand-background, $endColor: darken($brand-background, 2%)) {
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);                    // Safari 5.1+, Chrome 10+
    background-color: $endColor;
    background-image: -moz-linear-gradient(top, $startColor, $endColor);                       // FF 3.6+
    background-image: -ms-linear-gradient(top, $startColor, $endColor);                        // IE10
    background-image: -o-linear-gradient(top, $startColor, $endColor);                         // Opera 11.10
    background-image: linear-gradient(top, $startColor, $endColor);                            // W3C
    background-repeat: repeat-x;
}

// Media query mixin to add defined breakpoint.
//
// Please note, as this is a mobile-first framework the layout is mobile by
// default. Palm represents the first breakpoint encountered as screen size
// increases.
// Use the media query mixin like this:
//
// @include mq(lg) {
//       your-desktop-styles-here;
// }

@mixin mq($media-query) {

    @if $media-query == sm {
        @media only screen and (min-width: $sm) {
            @content;
        }
    }

    @if $media-query == md {
        @media only screen and (min-width: $md) {
            @content;
        }
    }

    @if $media-query == lg {
        @media only screen and (min-width: $lg) {
            @content;
        }
    }

    @if $media-query == xl {
        @media only screen and (min-width: $xl) {
            @content;
        }
    }
}

// Returns a number without a unit. For example 16px becomes 16
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// Converts the $root-size value to EMs for use in the functions below.
$root-size-em: ($root-size / 16px) * 1em;
//$root-size-em: 1em;

// The value that multiplies the $base-vertical-unit to get the $base-line-height.
// This gives type an ideal line-height.
$base-line-multi: 4 !default;

// The vertical grid unit. Margin, padding, and line-height are set to multiples
// of this value. This is the value that determines the baseline for our vertical
// rhythm.
$base-vertical-unit: strip-units(($root-lineheight * $root-size-em) / $base-line-multi);

//==============================================================================
// Helper function(s)
//==============================================================================

// Returns an EM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125em
@function spacer($lines: $base-line-multi, $font-size: $root-size-em) {
  @return ($lines * $base-vertical-unit) / (strip-units($font-size)) +0em;
}

// Returns a unitless number that is a multiple of our defined base vertical unit.
// For example 3 becomes 1.125
@function unitlessRhythm($lines: $base-line-multi, $font-size: $root-size-em) {
  @return ($lines * $base-vertical-unit) / (strip-units($font-size));
}

// Sets the type in EMs and makes a vertical rhythm unitless line-height that is
// based on context.
@mixin set-type($lines: $base-line-multi, $font-size: $root-size-em) {
    font-size: $font-size;
    line-height: unitlessRhythm($lines, $font-size);
}
